----ESTEBAN OCHOA TORRES
----Cód. 1628759
----UNIVERSIDAD DEL VALLE----
---MODELAMIENTO DE SIG EN WEB (SIG 3)----

create extension postgis;
create extension pgrouting;   -----SE CREAN LAS EXTENSIONES----

alter table redpeatonal_univalle add column x1 double precision;
alter table redpeatonal_univalle add column y1 double precision;
alter table redpeatonal_univalle add column x2 double precision;
alter table redpeatonal_univalle add column y2 double precision;
alter table redpeatonal_univalle add column source integer;         -----SE CREAN LAS COORDENADAS PLANAS Y LAS COLUMNAS TARGET,SOURCE Y COSTO
alter table redpeatonal_univalle add column target integer;
alter table redpeatonal_univalle add column costo double precision;

------SE EXTRAEN LOS PUNTOS EN UNA LÍNEA MEDIANTE LA FUNCIÓN ST_PointN
update redpeatonal_univalle set x1=st_x(ST_PointN(st_linemerge(the_geom),1));----st_NumPoints(st_lineMerge(geom),1) da la cuenta de puntos en la línea de la geometría
update redpeatonal_univalle set x2=st_x(ST_PointN(st_linemerge(the_geom),st_NumPoints(st_lineMerge(the_geom))));
update redpeatonal_univalle set y1=st_y(ST_PointN(st_linemerge(the_geom),1));
update redpeatonal_univalle set y2=st_y(ST_PointN(st_linemerge(the_geom),st_NumPoints(st_lineMerge(the_geom))));


-----SE DEBE CREAR LA TOPOLOGÍA DE LA RED MEDIANTE LA SENTENCIA pgr_createtopology('nombre_tabla','espacio_entre_enlaces','la_geometria','identificador')
select pgr_createtopology('redpeatonal_univalle',0.000001,'the_geom','gid')

 ----SE ACTUALIZA EL COSTO SEGÚN LA DISTANCIA---- con st_length(st_transform(geom,ESRI)) de acuerdo a la distancia que se recorre se cobra

update redpeatonal_univalle set costo= st_length(st_transform(the_geom,3115))


----SE CALCULA LA RUTA MÁS CORTA ENTRE DOS NODOS
CREATE OR REPLACE VIEW RN1N2 AS SELECT seq, id1 as node, id2 as edge, cost,rpu.the_geom
from pgr_dijkstra('select gid as id,source::integer, target::integer,costo::double precision as cost from redpeatonal_univalle',1114,350,false,false) djk 
left join redpeatonal_univalle rpu on (djk.id2=rpu.gid)

---CREAR FUNCION QUE PERMITE CALCULAR LA DISTANCIA ENTRE DOS NODOS CUALQUIERA

CREATE OR REPLACE FUNCTION RN1N2(text, integer,INTEGER)
 RETURNS boolean AS
$BODY$
DECLARE
nombre alias for $1;
nodo1 alias for $2;
nodo2 alias for $3;
BEGIN
EXECUTE 'CREATE OR REPLACE VIEW '||nombre||' AS SELECT seq, id1 as node, 
id2 as edge, cost,rpu.the_geom from pgr_dijkstra('||'''select gid as id,
source::integer, target::integer,costo::double precision as cost from 
redpeatonal_univalle'''||','||nodo1||','||nodo2||',false,false) djk  left join 
redpeatonal_univalle rpu on (djk.id2=rpu.gid)';
RETURN;
END;
$BODY$
  LANGUAGE plpgsql strict;

----CREAR UNA FUNCIÓN QUE PERMITA CALCULAR LA RUTA MÁS CERCA ENTRE DOS COORDENADAS LAT Y LON CON LA TABLA REDPEATONALUNIVALLE
create or replace function puntos_rutero(double precision,double precision, double precision,double precision, varchar) 
returns void as $$
declare

lat1 alias for $1;
lon1 alias for $2;
lat2 alias for $3;
lon2 alias for $4;
nombre alias for $5;

begin

execute 'create or replace view' ||nombre||' as select seq,id1 as node,
id2 as edge, cost, b.geom from pgr_dijkstra('||'''select gid as id,
source::integer,target::integer,costo::double precision as cost from
redpeatonal_univalle'''||'(select s.id::int from (select n.id, st_distance( st_setsrid(st_makepoint ('||lat1||','||lon1||'),4326),n.the_geom) 
from redpeatonal_univalle_vertices_pgr as n order by 2 asc limit 1) as s)'||',(select s.id::int from
(select n.id, st_distance( st_setsrid(st_makepoint ('||lat2||','||lon2||'),4326),n.the_geom)  from redpeatonal_univalle_vertices_pgr as n order by 2 asc limit 1) as s)
 ,false,false) a left join  redpeatonal_univalle rdpu on (a.id2 = rdpu.gid)';
 end;
 $$
 language plpgsql 


-----CREAR DISPARADORES CON CAPACIDAD PARA ALMACENAR INFORMACIÓN RESPECTO A UN PUNTO NUEVO INSERTADO

--PASOS PARA CREAR DISPARADOR
--¿qué nos piden?
--El Identificador, nombre y distancia al sitio de interes más cercano.
----• El Identificadir y la distancia al edificio màs cercano.
--• El identificadir y la distancia al edificio màs lejano.
---. El azimuth comprendido entre el edificio màs cercano y el màs lejano.
---• El punto medio (geometria) comprendido entre el edificio màs lejano y el màs cercano.
--• Las coordenadas (en 3115) del punto medio comprendido entre el edificio màs lejano y el màs cercano.
--• La distancia euclidiana entre el edificio màs cercano y el màs lejano.
--1.CREAR UNA TABLA DÓNDE SE ALMACENARÁ LA INFORMACIÓN DEL PUNTO DE INTERÉS


CREATE TABLE informacion_puntoInteres
(
	gid serial, 
	lon_nuevoPunto double precision, 
	lat_nuevoPunto double precision,
	geom geometry(POINT,4326),	
	--punto 1
	puntoInteres_cercano_id varchar(50),
	puntoInteres_cercano_nombre varchar(50),
	distanciaNuevoPunto_PI float,
	--punto 2
	edificio_cercano_id varchar(50),
	distanciaNuevoPunto_Edif_Cer float,
	--Punto 3
	edificio_lejano_id varchar(50),
	distanciaNuevoPunto_Edif_Lej float,
	--Punto 4
	azimut_PM_edifCer_edifLej float,
	--punto 5
	PM_edifCer_edifLej geometry(POINT,4326),
	--Punto 6
	x_PM_edifCer_edifLej double precision,
	y_PM_edifCer_edifLej double precision,
	--Punto 7
	distancia_PM_edifCer_edifLej float
);
alter table informacion_puntoInteres add constraint pkAuditor
primary key (gid);
--Funcion
CREATE OR REPLACE FUNCTION identificar_PI()
RETURNS trigger AS $$
    BEGIN
	--Crear Geometría
	new.geom := St_SetSRID( St_MakePoint(new.lon_nuevoPunto, new.lat_nuevoPunto), 4326);
	--El Identificador, nombre y distancia al sitio de interes más cercano.
	SELECT a.gid , a.name , ST_Distance(st_transform(a.geom,3115), st_transform(St_SetSRID( St_MakePoint(
	new.lon_nuevoPunto, new.lat_nuevoPunto), 4326),3115)) as d into new.puntoInteres_cercano_id,
	new.puntoInteres_cercano_nombre,new.distanciaNuevoPunto_PI FROM sitiosinteres_univalle as a 
	order by d asc limit 1;
	-------------------
	--El Identificadir y la distancia al edificio màs cercano.
	SELECT a.gid,ST_Distance(st_transform(a.geom, 3115), st_transform(st_setsrid(st_makepoint(
	new.lon_nuevoPunto, new.lat_nuevoPunto), 4326),3115)) as d into new.edificio_cercano_id,
	new.distanciaNuevoPunto_Edif_Cer FROM edificios_univalle  as a order by d asc limit 1;
	-------------------
	--El identificadir y la distancia al edificio màs lejano.
	SELECT a.gid,ST_Distance(st_transform(a.geom, 3115), st_transform(st_setsrid(st_makepoint(
	new.lon_nuevoPunto, new.lat_nuevoPunto), 4326),3115)) as d into new.edificio_lejano_id,
	new.distanciaNuevoPunto_Edif_Lej FROM edificios_univalle  as a order by d desc limit 1;
	-------------------
	--El azimuth comprendido entre el edificio màs cercano y el màs lejano.
	SELECT St_azimuth((SELECT c1.g1::geometry from (SELECT st_centroid(geom) as g1,ST_Distance(
	st_transform(a.geom, 3115),st_transform(st_setsrid(st_makepoint(new.lon_nuevoPunto, 
	new.lat_nuevoPunto), 4326),3115)) as d FROM edificios_univalle as a order by d asc limit 1) as c1),
	(SELECT c2.g2::geometry from (SELECT st_Centroid(geom) as g2,ST_Distance(st_transform(a.geom, 3115),
	st_transform(st_setsrid(st_makepoint(new.lon_nuevoPunto, new.lat_nuevoPunto), 4326),3115)) as d  
	FROM edificios_univalle  as a order by d desc limit 1) as c2)) into new.azimut_PM_edifCer_edifLej;
	-------------------
	--El punto medio (geometria) comprendido entre el edificio màs lejano y el màs cercano.
	SELECT st_centroid(st_MakeLine((SELECT c1.g1::geometry from (SELECT st_centroid(geom) as g1,
	ST_Distance(st_transform(a.geom, 3115), st_transform(st_setsrid(st_makepoint(new.lon_nuevoPunto,
	new.lat_nuevoPunto), 4326),3115)) as d FROM edificios_univalle as a order by d asc limit 1) c1,
	SELECT c2.g2::geometry from (SELECT st_Centroid(geom) as g2,ST_Distance(st_transform(a.geom, 3115),
	st_transform(st_setsrid(st_makepoint(new.lon_nuevoPunto, new.lat_nuevoPunto), 4326),3115)) as d
	FROM edificios_univalle  as a order by d desc limit 1) as c2))) into new.PM_edifCer_edifLej;
	-------------------
	--Las coordenadas (en 3115) del punto medio comprendido entre el edificio màs lejano y el màs cercano.
	--X
	SELECT st_x(st_centroid(st_transform(st_MakeLine((SELECT c1.g1::geometry from (SELECT st_centroid(
	geom) as g1,ST_Distance(st_transform(a.geom, 3115), st_transform(st_setsrid(st_makepoint(
	new.lon_nuevoPunto, new.lat_nuevoPunto), 4326),3115)) as d FROM edificios_univalle as a order by d asc 
	limit 1) as c1) , (SELECT c2.g2::geometry from (SELECT st_Centroid(geom) as g2,ST_Distance
	st_transform(a.geom, 3115), st_transform(st_setsrid(st_makepoint(new.lon_nuevoPunto, new.lat_nuevoPunto),
	4326),3115)) as d  FROM edificios_univalle  as a order by d desc limit 1) as c2)),3115))) 
	into new.x_PM_edifCer_edifLej;
	--Y
	SELECT st_y(st_centroid(st_transform(st_MakeLine((SELECT c1.g1::geometry from (SELECT st_centroid(
	geom) as g1,ST_Distance(st_transform(a.geom, 3115),st_transform(st_setsrid(st_makepoint(
	new.lon_nuevoPunto, new.lat_nuevoPunto), 4326),3115)) as d FROM edificios_univalle as a order by d asc 
	limit 1) as c1) , (SELECT c2.g2::geometry from (SELECT st_Centroid(geom) as g2,ST_Distance(
	st_transform(a.geom, 3115), st_transform(st_setsrid(st_makepoint(new.lon_nuevoPunto, new.lat_nuevoPunto),
	4326),3115)) as d  FROM edificios_univalle  as a order by d desc limit 1) as c2)),3115))) 
	into new.y_PM_edifCer_edifLej;	
	-------------------
	--La distancia euclidiana entre el edificio màs cercano y el màs lejano.
	SELECT st_distance((SELECT c1.g1::geometry from (SELECT st_transform(st_centroid(geom),3115) as g1,
	ST_Distance(st_transform(a.geom, 3115), st_transform(st_setsrid(st_makepoint(new.lon_nuevoPunto, 
	new.lat_nuevoPunto), 4326),3115)) as d FROM edificios_univalle as a order by d asc limit 1) as c1),
	SELECT c2.g2::geometry from (SELECT st_transform(st_Centroid(geom),3115) as g2,ST_Distance(
	st_transform(a.geom, 3115), st_transform(st_setsrid(st_makepoint(new.lon_nuevoPunto, new.lat_nuevoPunto),
	4326),3115)) as d  FROM edificios_univalle  as a order by d desc limit 1) as c2)) 
	into new.distancia_PM_edifCer_edifLej;
	-------------------
	RETURN new;
    END;
$$ LANGUAGE plpgsql;

--Disparador
CREATE TRIGGER trigger_inf_sitioInteres
  BEFORE INSERT OR UPDATE
  ON informacion_puntoInteres
  FOR EACH ROW
EXECUTE PROCEDURE identificar_PI();
